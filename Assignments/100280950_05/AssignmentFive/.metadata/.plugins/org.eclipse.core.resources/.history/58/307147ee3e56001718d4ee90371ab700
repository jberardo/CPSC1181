import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Program that creates an array n by n and checks if it is a magic number <br/>
 * The following evaluations should be equal: <br/>
 *   - Sum of all rows
 *   - Sum of all columns
 *   - Sum of all diagonals
 * 
 * Example:
 * 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1
 * 
 * Is a 4x4 matrix
 * 16 3  2  13
 * 5  10 11 8
 * 9  6  7  12
 * 4  15 14 1
 * 
 * that have 34 as a sum of all rows, columns and diagonals
 * 
 * @author Joao Berardo
 * @since June 19, 2017
 * @version 1.0
 *
 */
public class MagicSquare {
	/**
	 * Main method
	 * @param args not used
	 */
	public static void main(String[] args) {
		// maximum number (n)
		final int MAX_NUMBERS = 16;
		// number of rows and columns (4x4 matrix)
		final int NUM_ROWS = 4;
		final int NUM_COLS = 4;
		// number of diagonals
		final int NUM_DIAG = 2;
		
		// scanner object
		Scanner input = new Scanner(System.in);
		// table used to retrieve sum of rows, columns and diagonals
		Table square = new Table(NUM_ROWS, NUM_COLS, true);
		// array that holds the values to be printed (all sums)
		int[] sums = new int[NUM_ROWS + NUM_COLS + NUM_DIAG];
		// current array index used in some calculations
		int currentSumsIndex = 0;
		// array to hold user input
		ArrayList<Integer> currentNumber = new ArrayList<>();
		
		// prompt user
		System.out.print("Please type 16 integers: ");
		
		// loop through user input (should be 16 numbers, from 1 to 16)
		for (int i = 0; i < MAX_NUMBERS; i++)
		{
			try {
				currentNumber.add(input.nextInt());
			}
			catch (Exception ex)
			{
				System.out.println("Invalid input.");
				System.exit(1);
			}
		}

		// close input
		input.close();
		
		// user input validation
		if (currentNumber.size() < MAX_NUMBERS)
		{
			System.out.println("You have to type 16 numbers.");
			System.exit(1);
		}
		
		// store user input in the Table object
		for (int row = 0; row < NUM_ROWS; row++)
		{
			for (int col = 0; col < NUM_COLS; col++)
			{
				square.set(row, col, currentNumber.get(currentSumsIndex));
				currentSumsIndex++;	
			}
		}
		
		currentSumsIndex = 0;
		
		// retrieve sum for all rows and store in the array
		for (int i = 0; i < NUM_ROWS; i++)
		{
			sums[currentSumsIndex] += (int) square.sum(i, true);
			currentSumsIndex++;
		}

		// retrieve sum for all columns and store in the array
		for (int i = 0; i < NUM_COLS; i++)
		{
			sums[currentSumsIndex] += (int) square.sum(i, false);
			currentSumsIndex++;
		}

		// retrieve sum for all diagonals and store in the array
		for (int i = 0; i < NUM_DIAG; i++)
		{
			sums[currentSumsIndex] += (int) square.getDiagonalSum(i);
			currentSumsIndex++;
		}
		
		// used to check if matrix is a magic number 
		boolean isMagicSquare = false;
		
		// beginning of output
		System.out.printf("\n");
		// print matrix (all sums should be equal, 34 in the case of this test)
		for (int i = 0; i < currentSumsIndex; i++)
		{
			System.out.printf(sums[i] + " ");
			// n by n matrix (modul n), so we can skip line
			if (((i + 1) % NUM_ROWS) == 0)
			{
				System.out.println();
			}
		}
		
		if (isMagicSquare)
		{
			System.out.print("\nThis is a magic square!");
		}
		else
		{
			System.out.print("\nThis is not a magic square.");
		}
	}
}