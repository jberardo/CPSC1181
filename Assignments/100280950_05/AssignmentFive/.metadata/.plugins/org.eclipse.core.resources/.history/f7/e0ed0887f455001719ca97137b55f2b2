/**
 * Table class<br/>
 * This class uses 3-d arrays to represent a table</br>
 * We can get the sum of the ith row or column<br/>
 * 
 * 
 * @author Joao Berardo
 * @cversion 1.0
 * @since June 13, 2017
 *
 */
public class Table {
	// array representing the table
	private int[][] values;
	// number of rows
	private int numRows;
	//number of columns
	private int numCols;
	// if horizontal, get sum of ith row
	// else, get sum of ith column
	private boolean isHorizontal;

	/**
	 * Creates a table with rows and columns<br/>
	 * If <i>horizontal</i> is true, the sum is calculated for rows<br/>
	 * @param rows number of rows
	 * @param columns number of columns
	 * @param horizontal true for sum of rows, false for sum of columns
	 */
	public Table(int rows, int columns, boolean horizontal)
	{
		values = new int[rows][columns];
		this.numRows = rows;
		this.numCols = columns;
		this.isHorizontal = horizontal;
	}
	
	/**
	 * Inserts the value <i>n</i> in row <i>i</i> and column <i>j</i> 
	 * @param i row number
	 * @param j column number
	 * @param n value to be inserted
	 */
	public void set(int i, int j, int n)
	{
		values[i][j] = n;
	}

	// returns the sum of the i'th row (horizontal true)
	// or column (horizontal false)
	public double sum(int i, boolean horizontal)
	{
		double total = 0;
		
		if (horizontal)
		{
			// sum of rows
			for (int row  = 0; row < values.length; row++)
			{
				total += this.values[i][row];
			}
		}
		else
		{
			// sum of columns
			for (int col = 0; col < values[0].length; col++)
			{
				total += this.values[col][i];
			}
		}
		return total;
	}
	
	//
	public double getMaxBar(double index)
	{
		double maxNum;
		
		if (this.isHorizontal)
		{
			maxNum = 0;
			
			for (int i = 0; i < values.length; i++)
			{
				double rowSum = this.sum(i, true);
				
				if (rowSum > maxNum)
				{
					maxNum = rowSum;
				}
			}			
		}
		else
		{
			maxNum = 0;
			
			for (int i = 0; i < values[0].length; i++)
			{
				double colSum = this.sum(i, true);
				
				if (colSum > maxNum)
				{
					maxNum = colSum;
				}
			}			
		}
		
		return maxNum;
	}
	
	/**
	 * 
	 * @return
	 */
	public boolean isHorizontal() {
		return isHorizontal;
	}

	/**
	 * 
	 * @param isHorizontal
	 */
	public void setHorizontal(boolean isHorizontal) {
		this.isHorizontal = isHorizontal;
	}
}
