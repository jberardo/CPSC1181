/**
 * <h3>Roman Numbers Class</h3>
 * <br/>
 * 
 * This class converts a positive integer into the Roman number system
 *
 * Rules:
 * 	Positive number
 * 	Numbers up to 3,999
 * 	Thousands, hundreds, tens, and ones are expressed separately
 * 	The numbers 1 to 9 are expressed as: I, II, III, IV, V, VI, VII, VIII, IX
 * 	I preceding a V or X is subtracted from the value
 * 	Never have more than three Iâ€™s in a row
 * 	Tens and hundreds are done the same way (different letters)
 * 
 * Roman number system digits:
 * I	1
 * V	5
 * X	10
 * L	50
 * C	100
 * D	500
 * M	1,000
 * 
 * @author Joao Berardo
 * @since June, 09 2017
 * @version 1.0
 *
 */
public class RomanNumber {
	private int decimalNumber;
	private int romanNumber;
	
	/**
	 * Creates an object with the decimal number pass as an argument
	 * @param number Decimal number to be converted to Roman Number
	 */
	public RomanNumber(int number)
	{
		this.decimalNumber = number;
		
		if (checkDecimalNumber())
		{
			convertNumber();
		}
		else
		{
			this.decimalNumber = 0;
			this.romanNumber = 0;
		}
	}
	
	/**
	 * Returns the decimal number
	 * @return number in decimal system
	 */
	public int getDecimalNumber()
	{
		return 0;	
	}
	
	/**
	 * Returns the roman number
	 * @return number in roman number system
	 */
	public String getRomanNumner()
	{
		return romanNumber;
	}
	
	/**
	 * Check if the number entered by user is valid<br/>
	 * It should follow some rules, listed in the class description
	 * @return true if number is valid, false otherwise
	 */
	private boolean checkDecimalNumber()
	{
		return true;
	}
	
	/**
	 * Convert a decimal number to roman number 
	 */
	private void convertNumber()
	{
		this.romanNumber = decimalNumber;
	}
}
