/**
 * <h3>Roman Numbers Class</h3>
 * <br/>
 * 
 * This class converts a positive integer to Roman number system
 *
 * Rules:
 * 	Number must be between 1 and 3,999
 * 	Thousands, hundreds, tens, and ones are expressed separately
 * 	The numbers 1 to 9 are expressed as: I, II, III, IV, V, VI, VII, VIII, IX
 * 	I preceding a V or X is subtracted from the value
 * 	Never have more than three Iâ€™s in a row
 * 	Tens and hundreds are done the same way (different letters)
 * 
 * Roman number system digits:
 * I	1
 * V	5
 * X	10
 * L	50
 * C	100
 * D	500
 * M	1,000
 * 
 * @author Joao Berardo
 * @since June, 09 2017
 * @version 1.0
 *
 */
public class RomanNumber
{
	//instance variables
	private int decimalNumber;
	private String romanNumber;

	/**
	 * Creates a Roman Number</br>
	 * Default values are set to empty and/or zero
	 */
	public RomanNumber()
	{
		this.decimalNumber = 0;
		this.romanNumber = "";
	}
	
	/**
	 * Returns the decimal number
	 * @return number in decimal system
	 */
	public int getDecimalNumber()
	{
		return decimalNumber;
	}
	
	/**
	 * Returns the Roman number
	 * @return number in roman number system
	 */
	public String getRomanNumner()
	{
		return this.romanNumber;
	}
	
	/**
	 * Convert decimal to Roman number 
	 * @throws Exception number must be between 1 and 3,999
	 */
	public void convertNumber(int number) throws Exception
	{
		// check user input (Roman numbers can only be represented from 1 to 3999)
		// negative numbers, zero or number greater than 3999 can't be used
		if (number <= 0 || number > 3999)
		{
			throw new Exception("Number must be between 1 and 3,999");

		}
		
		// temporary variable that changes every time we need to get a roman value
		// each time I use this variable, it has a description about what it is doing
		int temp = 0;
		
		this.decimalNumber = number;
		
		// can be 0, 1, 2 or 3)
		// 0 means less than a thousand
		// 1 means between 1000 and 1999
		// 2 means between 2000 and 2999
		// 3 means between 3000 and 3999
		// get the thousands
		temp = number / 1000;
		
		// if number is > 1000
		if (temp > 0)
		{
			// add M to each thousand (temp can be 0, 1, 2 or 3)
			for (int i = 1; i <= temp; i++)
			{
				this.romanNumber += "M".trim();
			}
		}
		
		// here, temp can be between 100 and 999
		// we use this variable to append roman numbers
		// for ex: if temp is greater than 500. but is less than 900
		// get the hundreds
		temp = (number % 1000);
		
		if (temp >= 900)
		{
			this.romanNumber += "CM";
		}
		else if (temp >= 500)
		{
			this.romanNumber += "D";
			
			if (temp >= 600)
			{
				for (int i = 0; i < 2; i++)
				{
					this.romanNumber += "C";
				}
			}
		}
		else if ( temp >= 400)
		{
			this.romanNumber += "CD";
		}
		else
		{
			for (int i = 1; i < (temp / 100); i++)
			{
				this.romanNumber += "C";
			}
		}
		
		// get the tens
		temp = number % 100;
		
		if (temp > 90)
		{
			this.romanNumber += "LC";
		}
		else if (temp >= 50)
		{
			this.romanNumber += "L";
			
			if (temp >= 60)
			{
				for (int i = 0; i < 2; i++)
				{
					this.romanNumber += "X";
				}
			}
		}
		else if ( temp >= 40)
		{
			this.romanNumber += "XL";
		}
		else
		{
			for (int i = 1; i < (temp / 10); i++)
			{
				this.romanNumber += "X";
			}
		}
		
		// get the ones
		temp = number % 10;
		
		switch(temp)
		{
			case 1:
				this.romanNumber += "I";
				break;
			case 2:
				this.romanNumber += "II";
				break;
			case 3:
				this.romanNumber += "III";
				break;
			case 4:
				this.romanNumber += "IV";
				break;
			case 5:
				this.romanNumber += "V";
				break;
			case 6:
				this.romanNumber += "VI";
				break;
			case 7:
				this.romanNumber += "VII";
				break;
			case 8:
				this.romanNumber += "VIII";
				break;
			case 9:
				this.romanNumber += "IX";
				break;
		}
	}
}