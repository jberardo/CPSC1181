1.7) The final step is to create a running class, 
\
the class which will control the synchronization of the




 threads as well as
  the initialization
   of the MatrixMultiplyer. Create the

runner class which takes the file names which





contain the text matrices
as
ommand line arguments. You will then need to inittestealize MultiplyerThread 
or each index in the output 1.7) The final step is to create a running class, 
\
the class which will control the synchronization of the




 threads as well as
  the initialization
   of the MatrixMultiplyer. Create the

runner class which takes the file names which





contain the text matrices
as
ommand line arguments. You will then need to inittestealize MultiplyerThread 
or each index in the output 1.7) The final step is to create a running class, 
\
the class which will control the synchronization of the




 threads as well as
  the initialization
   of the MatrixMultiplyer. Create the

runner class which takes the file names which





contain the text matrices
as
ommand line arguments. You will then need to inittestealize MultiplyerThread 
or each index in the output 1.7) The final step is to create a running class, 
\
the class which will control the synchronization of the




 threads as well as
  the initialization
   of the MatrixMultiplyer. Create the

runner class which takes the file names which





contain the text matrices
as
ommand line arguments. You will then need to inittestealize MultiplyerThread 
or each index in the output 