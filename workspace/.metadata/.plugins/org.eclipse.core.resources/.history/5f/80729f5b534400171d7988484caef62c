package question07;

import java.util.Scanner;
import javax.swing.JFrame;

/**
 * Program that determines if two circles are disjoint, mutually contained or overlapping.
 * Both circles have a fixed center point at the same horizontal line.
 * Each circle has an user-defined radius.
 *  
 * In order to determine that, we need to calculate the distance between their centers.
 * The formula for calculating the distance between their center is:
 *   sqrt((xcenter1 - xcenter2) ^ 2 + (ycenter1 - ycenter1) ^ 2)
 *   
 * 
 *   
 * This program could only use the y-coordinate to calculate their distance, since that
 * their coordinates are fixed. But calculating their distances makes this program work 
 * even if we use user-defined coordinates.
 * 
 * @author  Joao Berardo
 * @version 1.0
 * @since   2017-05-26
 */
public class CircleOverlap {
	/**
	 * This is the main method.
	 * @param args Unused.
	 * @return Nothing.
	 */
	public static void main(String[] args) {
		// variables
		double distance;
		Scanner in = new Scanner(System.in);
		
		// prompt user for radius of 1st circle and assign to radius1 variable
		System.out.print("Input the radius of the first circle: ");
		double radius1 = in.nextDouble();
		// x and y coordinates of 1st circle
		double xcenter1 = 0;
		double ycenter1 = 0;
		
		// prompt user for radius of 2nd circle and assign to radius2 variable
		System.out.print("Input the radius of the second circle: ");
		// x and y coordinates of 2nd circle
		double radius2 = in.nextDouble();
		double xcenter2 = 40;
		double ycenter2 = 0;
		
		// print circles
		printCircles(xcenter1, ycenter1, radius1, xcenter2, ycenter2, radius2);
		
		distance = Math.pow((xcenter1 - xcenter2) * (xcenter1 - xcenter2) + (ycenter1 - ycenter2) * (ycenter1 - ycenter2), 0.5);
		System.out.println(distance);
		distance = Math.sqrt(Math.pow((xcenter1 - xcenter2), 2) + Math.pow((ycenter1 - ycenter2), 2));
		System.out.println(distance);
		
		// circle1 is inside circle2
	    if (radius2 >= radius1 && distance <= (radius2 - radius1)) {
	        System.out.println("Mutually contained.");
	    }
	    // circle2 is inside circle1
	    else if (radius1 >= radius2 && distance <= (radius1 - radius2) ) {
	        System.out.println("Mutually contained.");
	    }
	    else if (distance > (radius1 + radius2)) {
	        System.out.println("circle2 does not overlap circle1.");
	        System.out.println("Disjoint.");
	    } else {
	        System.out.println("circle2 overlaps circle1.");
	        System.out.println("Overlapping.");
	    }
	}
	
	/**
	 * Prints 2 circles to test if they are disjoint, overlapping, or mutually contained. 
	 * @param x1 X coordinate of the first circle
	 * @param y1 Y coordinate of the first circle
	 * @param r1 Radius of the first circle
	 * @param x2 X coordinate of the second circle
	 * @param y2 Y coordinate of the second circle
	 * @param r2 Radius of the second circle
	 * @return void This method returns void.
	 */
	private static void printCircles(double x1, double y1, double r1, double x2, double y2, double r2) {
		// Create frame
		JFrame frame = new JFrame();
	
		// frame properties
		frame.setSize(400, 400);
		frame.setTitle("Lab 02 - Circle");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	
		// create circle object
		CirclesComponent circlesComponent = new CirclesComponent(x1, y1, r1, x2, y2, r2);
	
		// show frame
		frame.add(circlesComponent);
		frame.setVisible(true);
	}
}
