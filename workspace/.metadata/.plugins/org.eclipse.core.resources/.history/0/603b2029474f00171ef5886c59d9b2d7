Declare a class ComboLock that works like the combination lock in a gym locker, as
shown here. The lock is constructed with a combination – three numbers between 0 – 39. The
reset method resets the dial so that it points to 0. The turnClockwise and turnCounterClockwise
methods turn the dial by a given number of ticks to the left or right. The open method attempts
to open the lock. The lock opens if the users first turned it counter clockwise to the first number
in the combination, then clockwise to the second, and then counter clockwise to the third.

Program the lock so that if the target number is overshot then the lock will not open,
however this should not be the case for the first turn, only if the combination number for the
second or third turns are overshot.

public class
{
  public ComboLock(int secret1, int secret2, int secret3){}
  public void reset{}
  public void turnCounterClockwise(int ticks){}
  public void turnClockwise(int ticks){}
  public boolean open(){}
}

As an example, consider if the lock has the combination 5, 35, 15. The lock could be turned
counter clockwise 5 or 45 ticks, and the first part of the combination would be satisfied. The
second combination must be reached by turning the lock 10 ticks clockwise. If that number is
exceeded, then the lock must reset. The lock should be able to turn freely within that ten tick
range without resetting the lock. The same is true for the last counter clockwise turn of 20 ticks
to position 15.

Use the following values to test your lock with a combination of 5, 35, 15.

ComboLock myLock = new ComboLock (5,35,15);
myLock.turnCounterClockwise(5);
myLock.turnClockwise(10);
myLock.turnCounterClockwise(20);
open should return true

ComboLock myLock = new ComboLock (5,35,15);
myLock.turnCounterClockwise(5);
myLock.turnCounterClockwise(1);
myLock.turnClockwise(11);
myLock.turnCounterClockwise(20);
open should return false

ComboLock myLock = new ComboLock (5,35,15);
myLock.turnCounterClockwise(45);
myLock.turnClockwise(9);
myLock.turnCounterClockwise(5);
myLock.turnClockwise(6);
myLock.turnCounterClockwise(19);
myLock.turnClockwise(17);
myLock.turnCounterClockwise(18);
open should return true

When your lock meets the all the requirements submit both the lock and lock tester class.
