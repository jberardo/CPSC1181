package dateserver;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;

/**
 * A TCP server that runs on port 9090.  When a client connects, it
 * sends the client the current date and time, then closes the
 * connection with that client.  Arguably just about the simplest
 * server you can write.
 */
public class DateServer {
	/**
     * Runs the server.
     */
	public static void main(String[] args) throws IOException
	{
		ServerSocket listener = new ServerSocket(9090);

		try {
		    serverSocket = new ServerSocket(6013);
		    while (true) {
		        client = serverSocket.accept();
		        OutputStream outputStream = client.getOutputStream();
		        InputStream inputStream = client.getInputStream();
	
		        System.out.println("" + outputStream + "-" + inputStream);
	
		        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
	
		        String line = null;
		        while ((line = bufferedReader.readLine()) != null) {
		            System.out.println("Message recieved from client :: " + line);
		        }
	
		        PrintWriter printWriter = new PrintWriter(outputStream, true);
	
		        printWriter.println(new java.util.Date().toString());
	
		        client.close();
		    }
		} catch (IOException exception) {
		    exception.printStackTrace();
		    System.err.println(exception);
		}
    }
}
